generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Template {
  id            String        @id @default(cuid())
  name          String
  ownerId       String
  accessibility Accessibility
  image         String
  content       Json
  createdAt     DateTime      @default(now())

  owner User @relation(fields: [ownerId], references: [id], onDelete: Restrict)

  @@fulltext([name])
}

enum Accessibility {
  PUBLIC
  PRIVATE
}

enum Role {
  USER
  ADMIN
}

// For next-auth:
// https://next-auth.js.org/adapters/models
// https://next-auth.js.org/adapters/prisma

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  templates     Template[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
